#This block should only store calibration data.
coordinate_frames {
    root_frame = "local";                 # a root_frame must be defined

    body {
        relative_to = "local";
        history = 1000;                    # number of past transforms to keep around,
        pose_update_channel = "POSE";      # use pose updates on POSE for body_to_local
        initial_transform{
            translation = [ 0, 0, 0 ];         # (x,y,z) translation vector
            quat = [ 1, 0, 0, 0 ];           # may be specified as a quaternion, rpy, rodrigues, or axis-angle
        }
    }


    global {
        relative_to = "local";
        history = 1000;
        update_channel = "GLOBAL_TO_LOCAL";
        initial_transform {
            translation = [0, 0, 0 ];
            quat = [1, 0, 0, 0];
        }
    }

    # These transformations correspond to going from RELATIVE_TO frame to the specified COORDINATE_FRAME
    # via the ordering: yaw(z) ---> pitch(y) ---> roll(x) where the angles are in DEGREES
    #
    # For example: The following specifies the transformation for the BROOM_REAR_LEFT from agile
    #              in which the broom is pitched down
    # BROOM_REAR_LEFT {
    #    relative_to = "body";
    #    history = 0;
    #    initial_transform{
    #        translation = [-1.345181, 0.382595, 2.640000];;
    #        rpy = [-0.000000, 33.122265, 133.750634];
    #    }
    #}

    SKIRT_FRONT {
        relative_to = "body";
        history = 0;
        initial_transform{
            #translation = [0.450, 0, 0.31];
            translation = [0.450, 0, 0];
            rpy         =  [0, 0, 0]; # Never calibrated
        }
    }

    chameleon {
        relative_to = "body";
        history = 0;
        initial_transform {
	        translation =  [ 0.235, 0.153, 0.547 ]; #[ 0.26, 0.16, 0.547 ];
            rpy          = [-90, 0, -90];
        }
    }

    KINECT {
        relative_to = "body";
        history = 0;
        initial_transform {
            translation = [ 0, 0, 1 ];
            rpy         = [ -90, 0, -90 ];
        }
    }

    imu {
        relative_to = "body";
        history = 0;
        initial_transform {
            translation = [ 0, 0, 0.3 ];
            rpy         = [ 180, 0, 0 ]; # Upside down, facing forward
        }
    }

    gps18 {
        relative_to = "body";
        history = 0;
        initial_transform {
            translation = [ 0, 0.19, 0.9 ];
            rpy         = [ 0, 0, 0 ];
        }
    }

    VELODYNE {
        relative_to = "body";
        history = 0;
        initial_transform {
            translation = [ 0.0, 0.0, 0.985 ]; # Never calibrated
            rpy         = [ 0.0, 0.0, 0.0];  # Never calibrated
        }
    }
}

models {
    husky {
        wavefront_model = "husky/husky_A200.obj";
        translate = [0, 0, 0.15]; #-0.4774696935, -0.288993438, 0];
        rotate_xyz = [0, 0, 0];
        scale = 0.1;
    }
    person {
        wavefront_model = "person/walking_person.obj";
        translate = [-2, -0.7, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
    }
    #haven't been calibrated
    table {
        wavefront_model = "table/table.obj";
        #scale 0.7911, 1.35, 1.28
        #translate 0,0.63, 0
        #rotate 90, 0, 0
        translate = [0,0.63, 0];#-0.63188, 0, 0.390958];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
        scale_xyz = [0.7911, 1.35, 1.28];
    }
    chair {
        wavefront_model = "chair/Chair.obj";
        #scale 0.0227, 0.0186, 0.0137
        #translate -3.56, 0, -0.86 - this is prob wrong
        #rotate 90, 0, 0
        translate = [-3.56, 0, -0.86];#0, 0, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
        scale_xyz = [0.0227, 0.0186, 0.0137];
    }
    trashcan {
        wavefront_model = "trashcan/trashcan.obj";
        translate = [-2, -0.7, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
    }
    tv {
        wavefront_model = "tv/LCD_Widescreen.obj";
        translate = [-2, -0.7, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
    }
    bed {
        wavefront_model = "bed/bed.obj";
        translate = [-2, -0.7, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
    }
    lamp {
        wavefront_model = "lamp/lamp.obj";
        translate = [-2, -0.7, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
    }
    laptop {
        wavefront_model = "laptop/laptop.obj";
        #scale 0.081, 0.11479, 0.0942
        #translate 0.58, 0.0, 0.86
        #rotate 90, 0, 0
        translate = [0.58, 0.0, 0.86];#-2, -0.7, 0];
        rotate_xyz = [90, 0, 90];
        scale = 0.02;
        scale_xyz = [0.081, 0.11479, 0.0942];
    }
    pc {
        wavefront_model = "pc/pc.obj";
        translate = [-2, -0.7, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
    }
}

calibration{
    velodyne {
        model = "VLP_16";
        channel = "VELODYNE";
        #    x_vs = [-0.11,0,-1.35,180,-30,0];
        x_vs = [-0.11,0,-1.35,180,0,0]; # REVISIT
        x_lr = [0,0,0,0,0,0]; # REVISIT
        intrinsic_calib_file = "velodyne/VeloView-VLP-16.xml";
    }

    # Ad-hoc methods used; assumed laser is level, and at body center... we should probably fix the center part
    # Used some manually-measured quantities

    # All in meters
    vehicle_bounds {
        front_left  = [.494,.335];
        front_right = [.494,-.335];
        rear_left   = [-.494,.335];
        rear_right  = [-.494,-.335];
    }

    calibration_to_body {
        position    = [0,0,0];
        orientation = [1,0,0,0];
    }

    imu{
        gyro_biases = [0.0, 0.0, 0.0]; #[0.019356, 0.021331, 0.012442];
        accel_biases = [0.0, 0.0, 0.0]; #[0.231766, -0.258528, -9.847225];
    }
}

#copied over from agile - need to check
obstacles {
    global_mask_forward = 40.0;
    global_mask_backward = 1.5;
    global_mask_width = 2.3;

    max_chunk_dimension = 0.05; # 0.1 # 0.25 # max chunk height & width = 2xMAX_CHUNK_DIMENSION
    max_associate_distance = 1.2;
    # Obstacle "chunks" are expired if they haven't been seen some number of seconds.
    # The tracker differentiates between chunks that lie within a rectangle around the
    # vehicle (the "persistent mask") and those outside this persistent mask.
    chunk_persist_mask_forward = 3.0; #5.5;     #[m] fwd of body-fixed frame
    chunk_persist_mask_backward = 2.0; #5.5;    #[m] bwd of body-fixed frame
    chunk_persist_mask_width = 5.0; #6.0;       #[m] total width centered along vehicle x-axis
    chunk_persist_mask_expire_sec = 0.6; #0.8;  #[s] time to persist objects within mask if unseen
    chunk_outside_persist_mask_expire_sec = 0.2; #0.4; #[s] time after which chunks outside the mask are expired if unseen
    too_close = 1.7; # [m] Remnant from agile that specifies distance to closest obstacle before bot stops.
}


three_dimensional_lidars {
    VELODYNE {
        coord_frame = "VELODYNE";
        laser_type = "VELODYNE_HDL_32E";
        lcm_channel = "VELODYNE_LIST";
    }
}

planar_lidars {
    SKIRT_FRONT {
        #device = "192.168.237.90";
	    serial = "H1004332";
        viewer_color = [ 0.0, 0.0, 1.0 ]; # blue
        max_range = 30.0;
        min_range = 0.2;
        angle_range = [135, -135];
        mask = [-2.35, -1.8, 1.8, 2.35]; # Min/max pairs of angles in radians [theta0, theta1]
        mask_range = [30, 30]; # RCTA UTM seems to be halucinating obstacles
        surround_region = [0, 1080];
        verifiers=[];
        frequency = 40;
        flipped = 0;
        laser_type = "HOKUYO_UTM";
        lcm_channel = "SKIRT_FRONT";
	coord_frame = "SKIRT_FRONT";
    }

}

semantic_classification{
        image{
        #relative to the data path
                model_path = "/model_trainer_model/image_models/all_images_model";
                lcm_channel = "DRAGONFLY_IMAGE";
        }
        laser{
                model_path = "/model_trainer_model/laser_models/all_model";
        }
}

rgbd_cameras {
    KINECT {
        coord_frame = "KINECT";
        lcm_channel = "KINECT_FRAME";

        intrinsic_cal {
            width = 640;
            height = 480;

            depth_fx = 576.09757860;
            depth_fy = 576.09757860;
            depth_cx = 321.06398107;
            depth_cy = 242.97676897;

            rgb_fx = 528.49404721;
            rgb_cx = 319.50000000;
            rgb_cy = 239.50000000;
            rgb_k1 = 0;
            rgb_k2 = 0;

            shift_offset = 1093.4753;# 4;
            projector_depth_baseline = 0.07214;
            R = [ 0.999999, -0.000796, 0.001256, 0.000739, 0.998970, 0.045368, -0.001291, -0.045367, 0.998970 ];
            T = [ -0.015756, -0.000923, 0.002316 ];
        }
    }
}

cameras {
    chameleon {
        cam_units_xml = "camera/chameleon_color_jpeg.xml";
        lcm_channel = "CHAMELEON_IMAGE";
        coord_frame = "chameleon";
        use_for_detection = 1; # Use for object reacquisition

        intrinsic_cal {
            width = 1288;
            height = 964;

            # Calibrated on 01-30-2018
            pinhole = [609.215892, 610.206527, 0.000, 634.871569, 521.238627];
            distortion_model = "plumb-bob"; # I'm not sure about this
            distortion_k = [-0.237871, 0.042726, 0.000000];
            distortion_p = [-0.000494, -0.000049];
        }

        streams {
            logging {
                width = 1288;
                height = 964;
                channel = "CHAMELEON_IMAGE";
                hz = 15;
                jpeg_quality = 90;
            }
        }
    }


    chameleon_log {
        cam_units_xml = "camera/chameleon_gray_jpeg.xml";
        lcm_channel = "CHAMELEON_IMAGE_SMALL";
        coord_frame = "chameleon";
        use_for_detection = 1; # Use for object reacquisition

        intrinsic_cal {
            width = 1296;
            height = 964;
            # Updated from 07-02-12 calibration
            # pinhole = [fx, fy, 0, cx, cy];
            pinhole = [603.53925622, 605.34379842, 0.000, 631.2826309, 506.37125114];
            distortion_model = "plumb-bob";
            distortion_k = [ -0.30335195,  0.141782, 0.00057303];
            distortion_p = [ -0.0005192, -0.04105515];
        }

        logging {
            width = 640;
            height = 480;
            channel = "CHAMELEON_IMAGE_SMALL";
            hz = 5;
            jpeg_quality = 90;
        }
    }
}


base{
    use_hardware_integrator = 1;
    motion_timeout         = 1.0;
}


# Several of these parameters are explained at http://www.cs.cmu.edu/~carmen/config_param.html
localizer{
    # The following (mean_..) are used if OLD_MOTION_MODEL
    # is NOT defined in the localizer. Otherwise, the localizer
    # uses the odom_ settings
    mean_c_d    = -0.0182;
    mean_c_t    = -0.105;
    std_dev_c_d = 0.0;
    std_dev_c_t = 0.0612;

    mean_d_d    = 1.0065;
    mean_d_t    = -0.0072;
    std_dev_d_d = 0.1; #0.0932;
    std_dev_d_t = 0.05; #0.0000;

    # For old motion model
    # dtheta_mean = distance*mean_t_d + dtheta_odom*mean_t_t
    # dtheta_std  = fabs(distance)*std_dev_t_d + fabs(dtheta_odom)*std_dev_t_t
    mean_t_d    = 0.0; #0.0144;
    mean_t_t    = 1.0; #0.8996;
    std_dev_t_d = 0.00;
    std_dev_t_t = 0.8; #0.65; #0.3699;

    num_particles   = 5000; #1000;#5000
    laser_max_range = 30.0;
    use_rear_laser  = false; #off
    tracking_beam_minlikelihood = 0.45;
    global_beam_minlikelihood   = 0.9;

    # The following are used if OLD_MOTION_MODEL is defined
    odom_a1 = 2.0; #0.2;    # a1 = error in rotation
                            #      as a function of rotation
    odom_a2 = 0.01;         # a2 = error in rotation
                            #      as a function of translation
    odom_a3 = 0.1; # 0.05  # 0.2   # a3 = error in translation
                            #             as a function of translation
    odom_a4 = 0.5;          # a4 = error in translation
                            #      as a function of rotation

    #robot_particles  = 1000;#5000            # number of samples
    #use_front_laser  = false; #off
    #use_laser1       = true;#on
    #use_laser2       = false;#  off
    #use_laser3       = false;
    #use_laser4       = false;
    #use_laser5       = false;
    min_wall_prob    = 0.4; #0.5; #0.5;   #was 0.25 Sachi changed ZMay 20
    outlier_fraction = 0.85;
    #might need to decrease these values
    update_distance  = 0.20;
    update_heading   = 0.20;
    ## integrate a beam each n rads (new version of laser_skip)
    #integrate_angle  = 0.15; ## 0.052359   ## 3 degrees
    integrate_angle_deg  = 3.0;
    do_scanmatching  = false; #off    #was off
    constrain_to_map = false; #off    #was off
    occupied_prob    = 0.5;
    lmap_std         = 0.3;
    global_lmap_std  = 0.6;
    global_evidence_weight = 0.01;
    global_distance_threshold = 2.0;
    global_test_samples = 1000000; #was 100000
    use_sensor          = true;
    tracking_beam_minlikelihood = 0.45;
    global_beam_minlikelihood = 0.9;
}


simulator{
    simulate_frontlaser = 0;
    simulate_rearlaser  = 0;
    dt                  = 0.025;
    time                = 0.025;
    sync_mode           = 0; #0/1
    use_robot           = 0; #was called off - make sure compatible
    acceleration        = 1.0;#0.5;
    rot_acceleration    = 5.0;#2.0;

    person_leg_width    = 0.1;
    person_dist_from_robot = 0.4;
    person_speed        = 0.3;

    laser_probability_of_random_max     = .0001;
    laser_probability_of_random_reading = .0001;
    laser_sensor_variance               = .0001;
}

robot{
    length     = 0.988;
    width      = 0.67;
    wheelbase  = 0.535;

    wheel_diameter = 0.32;
    encoder_ticks_per_meter = 5.463735805; # Measured on 2017-02-15

    # The following are used by the localizer
    frontlaser_offset  = 0.44;
    frontlaser_side_offset    = 0.0;
    frontlaser_angular_offset = 0.0;  #-0.785398163#45#0.0  #sachi added to new carmen
    frontlaser_id             = 1;    #sachi added

    rearlaser_offset      = -0.42;
    rearlaser_side_offset = 0.0;
    rearlaser_angular_offset = -3.1415926535897931;
    rearlaser_id             = 2;    #sachi added
}

navigator{
    goal_size            = 0.2;
    goal_theta_tolerance = 1.5;
    ignore_new_goals_until_completed = 0;
    waypoint_tolerance   = 0.3;

    replan_frequency  = 5;
    smooth_path       = true;#false;#true;
    plan_to_nearest_free_point = true;
}

pp_controller {

    # Lateral controller coefficients
    K_ct = 1.5; # 1.75 0.9 0.7 0.3;  # Used by mp_control_utils and mp_prediction
    K_ct_traj = 2.0; # 1.8 # Used by mp_control_utils

    # Longitudinal controller coefficients
    Kp = 1.5; # 0.75
    Ki = 1.0;

    # Steering controller coefficients
    K_str = 2.0;
    K_str_traj = 2.0;

    max_integral = 0.5; # Saturation value for integral term
    default_integral_state = -0.4;

    # This value is in degrees as used by mp_prediction (mp_control_utils uses a different value), so 9.0 seems odd
    # This should be removed as we update the controller to respect skid-steer dynamics
    max_steer = 9.0; # Remnant from forklift. May not be used by prediction.

    # Used by mp_control_utils
    dt = 0.02; # Controller execution frequency

    stopping_distance = 0.5; #0.5;
    stopping_distance_small = 0.2; # Used for tight navigation (e.g., elevators)
    line_collision_check_delta = 0.3; # Spacing for collision checking to next reference point

}


motion_planner {

    gridmap {
        convolve_line_searches = 10; # was 4 - should retry 4 # (an integer)
        failsafe_fudge = 0.0;  	     # extra dilation = (2-failsafe_level) x failsafe_fudge

	# The following are for the standard (i.e., non-small gridmap)
	range = 20.0;                # the width and height of the gridmap (m)
	forward_offset = 3.0;	     # how far ahead of the robot to center the gridmap (m)
	resolution = 0.05;	     # size of each cell (m)

	# The following are for the small (sensing_only_small = True) gridmap
	range_small = 6.0;           # the width and height of the gridmap (m)
	forward_offset_small = 1.0; # how far ahead of the robot to center the gridmap (m)
	resolution_small = 0.05;     # size of each cell (m)
	
    }

    rrtstar {
        iteration_limit = 50000000;
        time_limit = 0;
        tree_pub_iteration_limit = 100; #how often the tree is published
        tree_pub_time_limit = 0;
        tree_pub_final = true;
        traj_pub_iteration_limit = 500;
        traj_pub_time_limit = 0;
        traj_pub_final = true;
        commit_time = 1.0;
        lazy_collision_check_distance = 3.0; # How far along optimal trajectory to check for collisions. Requires running rrtstar in appropriate mode

        bot_at_goal_dist = 1.0; #
        bot_near_goal_dist = 4.0; # When the bot is at the end of the committed
                                  # trajectory and less than this distance
                                  # to the goal, update the tree root

        stop_dist = 0.5; # Distance below which the vehicle should slow down

        # Threshold below which we consider the vehicle to be stopped
        tv_stopped_threshold = 0.05;
        rv_stopped_threshold = 0.05;

        # The maximum allowable obs_max cost along the committed trajectory
        # above which the bot will stop
        commit_obs_max_collision = 200.0;
    }

    speed_design {
        default_tv = 0.5;
        max_tv = 0.5;

        # To avoid jerky maneuvers when turning on carpet, use different
        # maximum rotational velocities when moving forward (tv > thresh_tv)
        # and when (nearly) turning in place (tv <= thresh_tv)
        # The maximum rotational velocity when tv > thresh_tv
        thresh_tv = 0.2;
        max_rv = 0.35; # 20 deg/s # 0.5; #30 deg/s # 0.7; # 40 deg/s
        max_rv_in_place = 0.1;
        #
    }
}

# WARNING: planar lidar configuration not valid (copied from LR3 to test
#          sim_planar_lidar)
# this block stores all planar lidar config params except for calibration




state_estimator {
    #parameters for when the filter is used in absolute measurement mode
    absolute_filter{
#measurement noise
        xy_sm =  1177.968638903253350;
        z_sm  =  0.000152362059262;
        yaw_sm=  0.000001074166515;
        pr_sm =  100000.000000000000000;

        xy_vo =  1.000000000000000;
        z_vo  =  1.000000000000000;
        yaw_vo=  1.000000000000000;
        pr_vo =  1.000000000000000;

        pr_imu =  0.000000010000000;
        xydd_imu =  1.393918961009140;
        zdd_imu =  0.000069671517062;


#process noise
        xy =  0.031834588576815;
        z =  0.000717813481170;
        yaw =  83.134088763758839;
        pr =  0.000500000000000;

        xyd =  41.438859707784871;
        zd =  0.006335179080745;
        yawd =  0.386131813529540;

        xydd =  1.339597152090030;
        zdd =  2.004871488556871;

        imubias =  0.000000201108050;


    }


    #parameters for when the filter is used in relative measurement mode
    relative_filter{
#measurement noise
        xy_sm =  5021.551995469418216;
        z_sm  =  0.000058245081814;
        yaw_sm=  0.000000516583161;
        pr_sm =  100000.000000000000000;

        xy_vo =  1.000000000000000;
        z_vo  =  1.000000000000000;
        yaw_vo=  1.000000000000000;
        pr_vo =  1.000000000000000;

        pr_imu =  0.000000010000000;
        xydd_imu =  1.882103815321574;
        zdd_imu =  0.000183566428530;


#process noise
        xy =  1.684954921932901;
        z =  0.001081906770113;
        yaw =  2095.702310036921517;
        pr =  0.000500000000000;

        xyd =  37.927617082981584;
        zd =  0.016343833392782;
        yawd =  0.227919799318317;

        xydd =  0.817997360583666;
        zdd =  2.741147170501390;

        imubias =  0.000000010000000;

    }
}

#obstacle avoidance:
obstacle_avoidance{
    distToWallAvoidThresh =      1;
    distToWallStopThresh =        .7;
}



scanmatcher{
    beam_skip          = 3;
    spatial_decimation = .05;
    metersPerPixel     = .03;
    thetaResolution    = .015;

    addScanHitThresh   = .80;
    maxNumScans        = 10;
    maxAttitudeForAdd  = .12;

    initialSearchRangeXY    = .12;
    initialSearchRangeTheta = .06;
    maxSearchRangeXY        = .8;
    maxSearchRangeTheta     = .2;
    useGradientAscentPolish = 1;
    useMultiRes             = 3;
}

person_tracking{
    no_particles = 400;
}

robot_status {
    # If the following messages are not published or are stale,
    # the robot-status process will span a fault
    watch_channels = ["POSE"];#, "SKIRT_FRONT"];
}
